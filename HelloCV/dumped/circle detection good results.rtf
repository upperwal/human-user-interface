{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf390
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red127\green0\blue85;\red0\green0\blue192;\red42\green0\blue255;
\red63\green127\blue95;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs22 \cf2 import\cf0  \ul java.awt.Color\ulnone ;\
\cf2 import\cf0  \ul java.awt.Graphics\ulnone ;\
\cf2 import\cf0  \ul java.awt.image.BufferedImage\ulnone ;\
\cf2 import\cf0  \ul java.awt.image.WritableRaster\ulnone ;\
\cf2 import\cf0  \ul java.io.ByteArrayInputStream\ulnone ;\
\cf2 import\cf0  \ul java.io.InputStream\ulnone ;\
\cf2 import\cf0  \ul java.util.Vector\ulnone ;\
\
\cf2 import\cf0  \ul javax.imageio.ImageIO\ulnone ;\
\cf2 import\cf0  javax.swing.ImageIcon;\
\cf2 import\cf0  javax.swing.JFrame;\
\cf2 import\cf0  javax.swing.JLabel;\
\cf2 import\cf0  javax.swing.JPanel;\
\cf2 import\cf0  \ul javax.vecmath.Vector2f\ulnone ;\
\
\cf2 import\cf0  org.opencv.core.Core;\
\cf2 import\cf0  org.opencv.core.CvType;\
\cf2 import\cf0  org.opencv.core.Mat;\
\cf2 import\cf0  \ul org.opencv.core.MatOfByte\ulnone ;\
\cf2 import\cf0  org.opencv.core.Point;\
\cf2 import\cf0  org.opencv.core.Scalar;\
\cf2 import\cf0  \ul org.opencv.core.Size\ulnone ;\
\cf2 import\cf0  org.opencv.highgui.Highgui;\
\cf2 import\cf0  org.opencv.highgui.VideoCapture;\
\cf2 import\cf0  org.opencv.imgproc.Imgproc;\
\
\cf2 import\cf0  \ul sun.rmi.runtime.Log\ulnone ;\
\
\cf2 public\cf0  \cf2 class\cf0  \ul Main\ulnone  \cf2 extends\cf0  JPanel\{\
	\
	\
    \cf2 public\cf0  \cf2 static\cf0  \cf2 void\cf0  main(String[] args) \cf2 throws\cf0  InterruptedException \{\
        System.loadLibrary(Core.\cf3 NATIVE_LIBRARY_NAME\cf0 );\
        VideoCapture cap = \cf2 new\cf0  VideoCapture(0);\
        Thread.sleep(3000);\
        \cf2 if\cf0 (!cap.isOpened())\
        	System.\cf3 out\cf0 .println(\cf4 "Camera not found"\cf0 );\
        \cf2 else\cf0  \{\
        	System.\cf3 out\cf0 .println(\cf4 "Yes! camera found"\cf0 );\
        	Mat frame = \cf2 new\cf0  Mat();\
        	Mat \ul frame4\ulnone  = \cf2 new\cf0  Mat(500,500,CvType.\cf3 CV_8SC1\cf0 );\
        	Mat \ul frame5\ulnone  = \cf2 new\cf0  Mat(500,500,CvType.\cf3 CV_8SC1\cf0 );\
        	\cf5 //Vector<Vector2f> circles;\cf0 \
        	Mat frame3 = \cf2 new\cf0  Mat(500,500,CvType.\cf3 CV_8SC1\cf0 );\
        	Mat mIntermediateMat = \cf2 new\cf0  Mat();\
        	\cf5 //Mat frame3 = new Mat();\cf0 \
        	cap.read(frame);\
        	\cf5 //frame = Highgui.imread("read3.\ul jpg\ulnone ");\cf0 \
        	\
        	\
        	Highgui.imwrite(\cf4 "file1.jpg"\cf0 , frame);\
        	Mat frame2 = \cf2 new\cf0  Mat(500,500,CvType.\cf3 CV_8SC1\cf0 );\
        	\cf5 //Imgproc.cornerHarris(frame, frame3, 4, 5, 2.3);\cf0 \
        	Imgproc.Canny(frame, frame2,100,160); \cf5 //Best Result: 100,370\cf0 \
        	\cf5 //Imgproc.bilateralFilter(frame, frame2, 10,40.2,2.4);\cf0 \
        	Imgproc.cvtColor(frame, frame3, Imgproc.\cf3 COLOR_RGB2GRAY\cf0 );\
        	\cf5 //\ul Imgproc\ulnone .\cf0 \
        	\cf5 //frame3.convertTo(frame5, CvType.CV_8UC1);\cf0 \
        	System.\cf3 out\cf0 .println(frame3.type());\
        	System.\cf3 out\cf0 .println(frame3.channels());\
        	System.\cf3 out\cf0 .println(frame3.depth());\
        	Imgproc.HoughCircles(frame3, mIntermediateMat,Imgproc.\cf3 CV_HOUGH_GRADIENT\cf0 , 2, frame3.rows()/8,100,200,2,600); \cf5 //Best Result: 200,100,2,300\cf0 \
        	\
        	\
        	\cf2 if\cf0  (mIntermediateMat.cols() > 0)  \
                \cf2 for\cf0  (\cf2 int\cf0  x = 0; x < Math.min(mIntermediateMat.cols(), 10); x++)   \
                    \{  \
                    \cf2 double\cf0  vCircle[] = mIntermediateMat.get(0,x);  \
          \
                    \cf2 if\cf0  (vCircle == \cf2 null\cf0 )  \
                        \cf2 break\cf0 ;  \
          \
                    Point pt = \cf2 new\cf0  Point(Math.round(vCircle[0]), Math.round(vCircle[1]));  \
                    \cf2 int\cf0  radius = (\cf2 int\cf0 )Math.round(vCircle[2]);  \
                    \cf5 // draw the found circle  \cf0 \
                    Core.circle(frame, pt, radius,\cf2 new\cf0  Scalar(0,255,0),2);\
                                  \
                    \cf5 // draw a cross on the \ul centre\ulnone  of the circle  \cf0 \
                    \cf5 //DrawCross (frame, \ul pt\ulnone );  \cf0 \
                    \}  \
                          \
                \cf5 //if (bDisplayTitle)  \cf0 \
                  \cf5 //  ShowTitle ("\ul Hough\ulnone  Circles", 1);  \cf0 \
                      \
            \
        	\
        	\
        	\
        	\
            \cf5 /*for (\ul int\ulnone  x = 0; x < circles.cols(); x++) \cf0 \
\pard\pardeftab720
\cf5             \{\cf0 \
\cf5                     double vCircle[]=circles.get(0,x);\cf0 \
\
\cf5                     Point center=new Point(Math.round(vCircle[0]), Math.round(vCircle[1]));\cf0 \
\cf5                     \ul int\ulnone  radius = (\ul int\ulnone )Math.round(vCircle[2]);\cf0 \
\cf5                     // draw the circle center\cf0 \
\cf5                     Core.circle(frame, center, 3,new Scalar(0,255,0), -1, 8, 0 );\cf0 \
\cf5                     // draw the circle outline\cf0 \
\cf5                     Core.circle( frame, center, radius, new Scalar(0,0,255), 3, 8, 0 );\cf0 \
\
\cf5             \}*/\cf0 \
\
        	\cf5 //Imgproc.cvtColor(frame3, frame6, Imgproc.CV_HOUGH_GRADIENT);\cf0 \
        	\
        	\cf5 //System.out.println("m = " + frame6.size());\cf0 \
        	Highgui.imwrite(\cf4 "file2.jpg"\cf0 , frame);\
        	Highgui.imwrite(\cf4 "file2_canny.jpg"\cf0 , frame2);\
        	JFrame framee = \cf2 new\cf0  JFrame(\cf4 "My GUI"\cf0 );\
        	framee.setDefaultCloseOperation(JFrame.\cf3 EXIT_ON_CLOSE\cf0 );\
        	 \
        	framee.setResizable(\cf2 true\cf0 );\
        	framee.setLocationRelativeTo(\cf2 null\cf0 );\
        	 \
        	\cf5 // Inserts the image icon\cf0 \
        	ImageIcon image = \cf2 new\cf0  ImageIcon(\cf4 "file2.jpg"\cf0 );\
        	framee.setSize(image.getIconWidth()+10,image.getIconHeight()+35);\
        	\cf5 // Draw the Image data into the BufferedImage\cf0 \
        	JLabel label1 = \cf2 new\cf0  JLabel(\cf4 " "\cf0 , image, JLabel.\cf3 CENTER\cf0 );\
        	framee.getContentPane().add(label1);\
        	 \
        	framee.validate();\
        	framee.setVisible(\cf2 true\cf0 );\
        	cap.release();\
        \}\
    \}\
\}}