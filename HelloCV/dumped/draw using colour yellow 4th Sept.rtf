{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf390
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 import processing.core.PApplet;\
import processing.core.PImage;\
import processing.video.*;\
 \
import org.opencv.core.Core;\
import org.opencv.core.Mat;\
import org.opencv.core.CvType;\
import org.opencv.core.MatOfPoint;\
import org.opencv.core.Point;\
import org.opencv.core.Scalar;\
import org.opencv.core.Size;\
import org.opencv.highgui.Highgui;\
import org.opencv.imgproc.Imgproc;\
import org.opencv.imgproc.Moments;\
 \
import java.awt.image.BufferedImage;\
import java.awt.image.WritableRaster;\
import java.awt.image.Raster;\
import java.util.ArrayList;\
import java.util.List;\
public class Main extends PApplet \{\
	Capture cap;\
	int pixCnt;\
	BufferedImage bm;\
	PImage img;\
	float x1=0,y1=0,x2,y2;\
\
public PImage getReversePImage( PImage image ) \{\
	 PImage reverse = new PImage( image.width, image.height );\
	 for( int i=0; i < image.width; i++ )\{\
	  for(int j=0; j < image.height; j++)\{\
	   reverse.set( image.width - 1 - i, j, image.get(i, j) );\
	  \}\
	 \}\
	 return reverse;\
	\}\
	\
	\
public void setup() \{\
	size(640, 480);\
	background(102);\
	  System.loadLibrary(Core.NATIVE_LIBRARY_NAME);\
	  println(Core.VERSION);\
	  \
	  \
	 \
	  cap = new Capture(this, width, height);\
	  cap.start();\
	  bm = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR);\
	  img = createImage(width, height, ARGB);\
	  pixCnt = width*height*4;\
\}\
public void convert(PImage _i) \{\
	  _i = getReversePImage(_i);\
	  bm.setRGB(0, 0, _i.width, _i.height, _i.pixels, 0, _i.width);\
	  Raster rr = bm.getRaster();\
	  byte [] b1 = new byte[pixCnt];\
	  rr.getDataElements(0, 0, _i.width, _i.height, b1);\
	  Mat m1 = new Mat(_i.height, _i.width, CvType.CV_8UC4);\
	  Mat krl = new Mat();\
	  Moments mm;\
	  //Mat matTemp = new Mat();\
	  m1.put(0, 0, b1);\
	  Highgui.imwrite("new_img_m1.jpg", m1);\
	  //Imgproc.warpPerspective(m1, m1,matTemp,m1.size());\
	  Mat m2 = new Mat(_i.height, _i.width, CvType.CV_8UC1);\
	  List<MatOfPoint> contours = new ArrayList<MatOfPoint>();\
	  Mat matrgb = new Mat();\
	  //Imgproc.cvtColor(m1, m2, Imgproc.COLOR_BGRA2GRAY);   \
	  Imgproc.cvtColor(m1, matrgb, Imgproc.COLOR_BGRA2RGB);  \
	  Imgproc.GaussianBlur(matrgb, matrgb, new Size(5, 5), 12);\
	  Highgui.imwrite("new_img_rgb.jpg", matrgb);\
	  Imgproc.cvtColor(matrgb, matrgb, Imgproc.COLOR_RGB2HSV);  \
	  //Imgproc.GaussianBlur(matrgb, matrgb, new Size(5, 5), 12);\
	  Highgui.imwrite("new_img_m2.jpg", matrgb);\
	  Core.inRange(matrgb, new Scalar(92,120,50), new Scalar(100,255,255), matrgb);\
	  mm = Imgproc.moments(matrgb);\
	  double moment10 = mm.get_m10();\
	    double moment01 = mm.get_m01();\
	    double moment00 = mm.get_m00();\
	    x2 = (float) ((float)moment10 / moment00);\
	    y2 = (float) ((float)moment01 / moment00);\
	  //Imgproc.findContours(matrgb, contours, new Mat(), Imgproc.RETR_LIST, Imgproc.CHAIN_APPROX_SIMPLE);\
	  //System.out.println(contours.);\
	  /*for (int idx = 0; idx < contours.size(); idx++) \{\
		    Mat contour = contours.get(idx);\
		    //Highgui.imwrite("new_img_contour.jpg", contour);\
		\}*/\
	  //Imgproc.erode(matrgb, matrgb, krl);\
	  //Imgproc.dilate(matrgb, matrgb, krl);\
	  Highgui.imwrite("new_img_erode.jpg", matrgb);\
	  Imgproc.GaussianBlur(matrgb, matrgb, new Size(5, 5), 12);\
	  Highgui.imwrite("new_img_inrange.jpg", matrgb);\
	  Imgproc.GaussianBlur(m1, m2, new Size(5, 5), 12);\
	  //Imgproc.Canny(m2, m2, 100,140);\
	  Imgproc.Canny(m2, m2, 100,180);\
	  Highgui.imwrite("new_img.jpg", m2);\
	  \
	  /*Imgproc.HoughCircles(m2, m2,Imgproc.CV_HOUGH_GRADIENT, 2, m2.rows()/4,100,70,1,300); //Best Result: 200,100,2,300\
		if (m2.cols() > 0)  \
            for (int x = 0; x < Math.min(m2.cols(), 10); x++)   \
                \{  \
                double vCircle[] = m2.get(0,x);  \
      \
                if (vCircle == null)  \
                    break;  \
                \
                Point pt = new Point(Math.round(vCircle[0]), Math.round(vCircle[1]));  \
                int radius = (int)Math.round(vCircle[2]); \
                x2=(float)pt.x;\
                y2=(float)pt.y;\
                // draw the found circle  \
                \
                Core.circle(m1, pt, radius,new Scalar(0,255,0),4);\
\
                  \
                // draw a cross on the centre of the circle  \
                //DrawCross (frame, pt);  \
                \}  */\
\
	  //Imgproc.cvtColor(m1, m1, Imgproc.COLOR_GRAY2BGRA);\
	 \
	  matrgb.get(0, 0, b1);\
	  WritableRaster wr = bm.getRaster();\
	  wr.setDataElements(0, 0, _i.width, _i.height, b1);\
	  bm.getRGB(0, 0, _i.width, _i.height, img.pixels, 0, _i.width);\
	  img.updatePixels();\
	  bm.flush();\
	  m2.release();\
	  matrgb.release();\
	  \
	\}\
public void draw() \{\
	 if (cap.available()) \{\
		    cap.read();\
		   //scale(1,1);\
		    //image(cap,0,0);\
		    convert(cap);\
		    //image(img, 0, 0);\
		    //background(0);\
		    stroke(255);\
		    strokeWeight(10);\
		    if(x1!=0&&x2!=0) \{\
		    	line(x1,y1,x2,y2);\
		    	x1=x2;\
		    	y1=y2;\
		    \}\
		    x1=x2;\
		    y1=y2;\
	 \}\
  \
\}\
\}}