{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf390
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red127\green0\blue85;\red0\green0\blue192;\red63\green127\blue95;
\red42\green0\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs22 \cf2 import\cf0  processing.core.PApplet;\
\cf2 import\cf0  processing.core.PImage;\
\cf2 import\cf0  processing.video.*;\
 \
\cf2 import\cf0  org.opencv.core.Core;\
\cf2 import\cf0  org.opencv.core.Mat;\
\cf2 import\cf0  org.opencv.core.CvType;\
\cf2 import\cf0  org.opencv.core.Point;\
\cf2 import\cf0  org.opencv.core.Scalar;\
\cf2 import\cf0  org.opencv.core.Size;\
\cf2 import\cf0  org.opencv.highgui.Highgui;\
\cf2 import\cf0  org.opencv.imgproc.Imgproc;\
 \
\cf2 import\cf0  java.awt.image.BufferedImage;\
\cf2 import\cf0  java.awt.image.WritableRaster;\
\cf2 import\cf0  java.awt.image.Raster;\
\cf2 public\cf0  \cf2 class\cf0  \ul Main\ulnone  \cf2 extends\cf0  PApplet \{\
	Capture \cf3 cap\cf0 ;\
	\cf2 int\cf0  \cf3 pixCnt\cf0 ;\
	BufferedImage \cf3 bm\cf0 ;\
	PImage \cf3 img\cf0 ;\
	\cf2 float\cf0  \cf3 x1\cf0 =0,\cf3 y1\cf0 =0,\cf3 x2\cf0 ,\cf3 y2\cf0 ;\
\
\cf2 public\cf0  PImage getReversePImage( PImage image ) \{\
	 PImage reverse = \cf2 new\cf0  PImage( image.\cf3 width\cf0 , image.\cf3 height\cf0  );\
	 \cf2 for\cf0 ( \cf2 int\cf0  i=0; i < image.\cf3 width\cf0 ; i++ )\{\
	  \cf2 for\cf0 (\cf2 int\cf0  j=0; j < image.\cf3 height\cf0 ; j++)\{\
	   reverse.set( image.\cf3 width\cf0  - 1 - i, j, image.get(i, j) );\
	  \}\
	 \}\
	 \cf2 return\cf0  reverse;\
	\}\
	\
	\
\cf2 public\cf0  \cf2 void\cf0  setup() \{\
	size(640, 480);\
	background(102);\
	  System.loadLibrary(Core.\cf3 NATIVE_LIBRARY_NAME\cf0 );\
	  println(Core.\cf3 VERSION\cf0 );\
	 \
	  \cf3 cap\cf0  = \cf2 new\cf0  Capture(\cf2 this\cf0 , \cf3 width\cf0 , \cf3 height\cf0 );\
	  \cf3 cap\cf0 .start();\
	  \cf3 bm\cf0  = \cf2 new\cf0  BufferedImage(\cf3 width\cf0 , \cf3 height\cf0 , BufferedImage.\cf3 TYPE_4BYTE_ABGR\cf0 );\
	  \cf3 img\cf0  = createImage(\cf3 width\cf0 , \cf3 height\cf0 , \cf3 ARGB\cf0 );\
	  \cf3 pixCnt\cf0  = \cf3 width\cf0 *\cf3 height\cf0 *4;\
\}\
\cf2 public\cf0  \cf2 void\cf0  convert(PImage _i) \{\
	  _i = getReversePImage(_i);\
	  \cf3 bm\cf0 .setRGB(0, 0, _i.\cf3 width\cf0 , _i.\cf3 height\cf0 , _i.\cf3 pixels\cf0 , 0, _i.\cf3 width\cf0 );\
	  Raster rr = \cf3 bm\cf0 .getRaster();\
	  \cf2 byte\cf0  [] b1 = \cf2 new\cf0  \cf2 byte\cf0 [\cf3 pixCnt\cf0 ];\
	  rr.getDataElements(0, 0, _i.\cf3 width\cf0 , _i.\cf3 height\cf0 , b1);\
	  Mat m1 = \cf2 new\cf0  Mat(_i.\cf3 height\cf0 , _i.\cf3 width\cf0 , CvType.\cf3 CV_8UC4\cf0 );\
	  \cf4 //Mat matTemp = new Mat();\cf0 \
	  m1.put(0, 0, b1);\
	  Highgui.imwrite(\cf5 "new_img_m1.jpg"\cf0 , m1);\
	  \cf4 //Imgproc.warpPerspective(m1, m1,matTemp,m1.size());\cf0 \
	  Mat m2 = \cf2 new\cf0  Mat(_i.\cf3 height\cf0 , _i.\cf3 width\cf0 , CvType.\cf3 CV_8UC1\cf0 );\
	  \
	  Mat matrgb = \cf2 new\cf0  Mat();\
	  \cf4 //Imgproc.cvtColor(m1, m2, Imgproc.COLOR_BGRA2GRAY);   \cf0 \
	  Imgproc.cvtColor(m1, matrgb, Imgproc.\cf3 COLOR_BGRA2RGB\cf0 );  \
	  Highgui.imwrite(\cf5 "new_img_m2.jpg"\cf0 , matrgb);\
	  \
	  Imgproc.GaussianBlur(m1, m2, \cf2 new\cf0  Size(5, 5), 12);\
	  \cf4 //Imgproc.Canny(m2, m2, 100,140);\cf0 \
	  Imgproc.Canny(m2, m2, 100,180);\
	  Highgui.imwrite(\cf5 "new_img.jpg"\cf0 , m2);\
	  Imgproc.HoughCircles(m2, m2,Imgproc.\cf3 CV_HOUGH_GRADIENT\cf0 , 2, m2.rows()/4,100,70,1,300); \cf4 //Best Result: 200,100,2,300\cf0 \
		\cf2 if\cf0  (m2.cols() > 0)  \
            \cf2 for\cf0  (\cf2 int\cf0  x = 0; x < Math.min(m2.cols(), 10); x++)   \
                \{  \
                \cf2 double\cf0  vCircle[] = m2.get(0,x);  \
      \
                \cf2 if\cf0  (vCircle == \cf2 null\cf0 )  \
                    \cf2 break\cf0 ;  \
                \
                Point pt = \cf2 new\cf0  Point(Math.round(vCircle[0]), Math.round(vCircle[1]));  \
                \cf2 int\cf0  radius = (\cf2 int\cf0 )Math.round(vCircle[2]); \
                \cf3 x2\cf0 =(\cf2 float\cf0 )pt.\cf3 x\cf0 ;\
                \cf3 y2\cf0 =(\cf2 float\cf0 )pt.\cf3 y\cf0 ;\
                \cf4 // draw the found circle  \cf0 \
                \
                Core.circle(m1, pt, radius,\cf2 new\cf0  Scalar(0,255,0),4);\
\
                  \
                \cf4 // draw a cross on the \ul centre\ulnone  of the circle  \cf0 \
                \cf4 //DrawCross (frame, \ul pt\ulnone );  \cf0 \
                \}  \
\
	  \cf4 //Imgproc.cvtColor(m1, m1, Imgproc.COLOR_GRAY2BGRA);\cf0 \
	 \
	  m1.get(0, 0, b1);\
	  WritableRaster wr = \cf3 bm\cf0 .getRaster();\
	  wr.setDataElements(0, 0, _i.\cf3 width\cf0 , _i.\cf3 height\cf0 , b1);\
	  \cf3 bm\cf0 .getRGB(0, 0, _i.\cf3 width\cf0 , _i.\cf3 height\cf0 , \cf3 img\cf0 .\cf3 pixels\cf0 , 0, _i.\cf3 width\cf0 );\
	  \cf3 img\cf0 .updatePixels();\
	  \cf3 bm\cf0 .flush();\
	  m2.release();\
	  m1.release();\
	  \
	\}\
\cf2 public\cf0  \cf2 void\cf0  draw() \{\
	 \cf2 if\cf0  (\cf3 cap\cf0 .available()) \{\
		    \cf3 cap\cf0 .read();\
		   \cf4 //scale(1,1);\cf0 \
		    \cf4 //image(cap,0,0);\cf0 \
		    convert(\cf3 cap\cf0 );\
		    \cf4 //image(\ul img\ulnone , 0, 0);\cf0 \
		    \cf4 //background(0);\cf0 \
		    stroke(255);\
		    strokeWeight(10);\
		    \cf2 if\cf0 (\cf3 x1\cf0 !=0&&\cf3 x2\cf0 !=0) \{\
		    	line(\cf3 x1\cf0 ,\cf3 y1\cf0 ,\cf3 x2\cf0 ,\cf3 y2\cf0 );\
		    	\cf3 x1\cf0 =\cf3 x2\cf0 ;\
		    	\cf3 y1\cf0 =\cf3 y2\cf0 ;\
		    \}\
		    \cf3 x1\cf0 =\cf3 x2\cf0 ;\
		    \cf3 y1\cf0 =\cf3 y2\cf0 ;\
	 \}\
  \
\}\
\}}